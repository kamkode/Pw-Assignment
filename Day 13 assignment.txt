1.In Java, the default values of an array depends on the data type of the array. Here are the default values for each data type:

For numeric types (byte, short, int, long, float, and double), the default value is 0.
For the char type, the default value is the null character ('\u0000').
For the boolean type, the default value is false.
For object reference types (such as String or any user-defined class), the default value is null.



2.Yes

3.Heap memory

4.Fixed Size: The size of an array is fixed when it is created, which means that we

 cannot add or remove elements from an array after it has been created. This can be limiting in situations where we need a dynamic data structure that can grow or shrink as needed.

Lack of Flexibility: Since arrays in Java have a fixed size, they cannot be resized easily. If we need to add or remove elements from an array, we must create a new array and copy the elements from the old array to the new one.

No Built-in Methods: Java arrays do not have any built-in methods or functions that make it easy to manipulate the array. For example, if we want to find the maximum or minimum value in an array, we must write wer own code to search through the array.

Primitive Types Only: Java arrays can only store elements of primitive data types (such as int, float, double, etc.) and object references. we cannot store elements of different data types in the same array.

Inefficient for Insertion and Deletion: Inserting or deleting an element in the middle of an array requires shifting all the elements after it, which can be a time-consuming operation. This makes arrays less efficient than other data structures like LinkedLists when it comes to insertion and deletion operations.


5.In Java, an anonymous array is an array that is declared and instantiated without a variable name. Instead, it is created directly in the code where it is needed. Anonymous arrays are useful when you need to create a temporary array to pass as an argument to a method or to perform a quick calculation without the need for a named array.

int sum = 0;
sumArray(new int[]{1, 2, 3, 4, 5}); //passing an anonymous array to the method

//method that accepts an array and calculates its sum
public static void sumArray(int[] array) {
   int sum = 0;
   for (int i = 0; i < array.length; i++) {
       sum += array[i];
   }
   System.out.println("Sum: " + sum);
}


6.
For Loop
Enhanced For Loop
Arrays.stream()
Iterator



7.In Java, length and length() are used to determine the size or length of different types of data structures, but they are used in different contexts and with different types of data structures.

length: length is a property of an array that returns the number of elements in the array. It is used with arrays of any data type. Here is an example:1

int[] numbers = {1, 2, 3, 4, 5};
int size = numbers.length;
System.out.println(size); // prints 5



ex2:
String name = "Kamlesh ";
int length = name.length();
System.out.println(length);



So, the main difference between length and length() is that length is a property of arrays, while length() is a method of the String class.

Additionally, length is a public property, while length() is a public method, which means they are accessed and used differently in code.





